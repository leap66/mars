apply plugin: 'com.android.application'

def gitVersionCode() {
    def cmd = 'git rev-list HEAD --first-parent --count'
    cmd.execute().text.trim().toInteger()
}

def gitVersionName() {
    def cmd = 'git describe --tags'
    def version = cmd.execute().text.trim()
    def pattern = "-(\\d+)-g"
    def matcher = version =~ pattern
    if (matcher) {
        version = version.substring(0, matcher.start())
    } else if (version) {
        version = version
    } else {
        version = 0.0
    }
    return version
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.leap.mars"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "SERVER_URL", System.getenv("SERVER_URL") ?: "\"http://172.17.6.39:8088/leap/\"")
        buildConfigField("String", "AGREEMENT_URL", System.getenv("SERVER_URL") ?: "\"http://www.baidu.com\"")
        // 192.168.1.109  172.17.3.108
        println("------------------环境变量--------------")
        println("versionCode=" + gitVersionCode())
        println("versionName=" + gitVersionName())
        getBuildConfigFields().each { item ->
            println("KEY=" + item.key)
            println("VALUE=" + item.value.getValue())
        }
        println("------------------环境变量--------------")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    applicationVariants.all { variant ->
        def versionCode = gitVersionCode()
        def versionName = variant.buildType.name + "." + versionCode
        if (variant.buildType.name == "release") {
            versionName = gitVersionName()
        }
        variant.mergedFlavor.versionCode = versionCode
        variant.mergedFlavor.versionName = versionName

        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "laya-${variant.buildType.name}-${versionName}-${versionCode}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile project(':mini')
}
